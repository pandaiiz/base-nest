datasource database {
  provider     = "postgresql"
  url          = env("PG_DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum MenuType {
  CATALOG
  MENU
  ACCESS
}

enum Status {
  PLANING
  IN_PRODUCTION
  COMPLETED
}

enum UserRole {
  MEMBER
  ADMIN

  @@map("userRole")
}

model ProductionPlan {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  // 数量
  quantity  Int
  status    Status
  // 编码
  code      String   @unique

  @@map("sys_production_plan")
}

model Customer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  // 编码
  code      String   @unique

  @@map("sys_customer")
}

model Employee {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  name         String
  code         String
  // 计件数量
  piecesNumber Float?    @map("pieces_number")
  // 离职日期
  leftAt       DateTime? @map("left_at")

  @@map("sys_employee")
}

model Supplier {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  name      String
  // 编码
  code      String     @unique
  // 原料
  materials Material[] @relation("sys_supplier_material")

  @@map("sys_supplier")
}

model Material {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  name      String
  // 编码
  code      String?    @unique
  // 备注
  remark    String?
  // 单位
  unit      String?
  // 库存
  stock     Float      @default(0)
  // 供应商
  suppliers Supplier[] @relation("sys_supplier_material")

  @@map("sys_material")
}

model Menu {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  parentId   Int?     @map("parent_id")
  name       String
  path       String?
  permission String?
  type       MenuType
  icon       String?
  sort       Int?     @default(0)
  component  String?
  show       Int      @default(1)
  status     Int      @default(1)
  // 角色
  roles      Role[]   @relation("sys_menu_role")

  @@map("sys_menu")
}

model Role {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  // 角色名
  name      String   @unique @database.VarChar(50)
  // 角色标识
  value     String   @unique
  // 角色描述
  remark    String?
  // 状态：1启用，0禁用
  status    Int?     @default(1)
  // 是否默认用户
  default   Boolean? @default(false)
  // 菜单
  menus     Menu[]   @relation("sys_menu_role")
  // 用户
  users     User[]   @relation("sys_user_role")

  @@map("sys_role")
}

model Dept {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  // 部门名称
  name      String
  sort      Int?     @default(0)
  // 用户列表
  users     User[]

  @@map("sys_dept")
}

model LoginLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  // IP
  ip        String?
  // 地址
  address   String?
  // 登录方式
  provider  String?
  // 浏览器ua
  ua        String?  @database.VarChar(500)
  // 用户
  user      User?    @relation(fields: [userId], references: [id])
  // 用户ID
  userId    Int?     @map("user_id")

  @@index([userId])
  @@map("sys_login_log")
}

model Storage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  // 文件名
  name      String
  // 真实文件名
  fileName  String?
  // 扩展名
  extName   String?  @map("ext_name")
  // 文件路径
  path      String
  // 文件类型
  type      String?
  // 文件大小
  size      String?
  // 用户ID
  userId    Int?     @map("user_id")
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("tool_storage")
}

model User {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  username     String        @unique
  password     String
  salt         String        @database.VarChar(32)
  nickname     String?
  avatar       String?
  phone        String?
  remark       String?
  status       Int?          @default(1)
  dept         Dept?         @relation(fields: [deptId], references: [id])
  deptId       Int?          @map("dept_id")
  // 角色
  roles        Role[]        @relation("sys_user_role")
  // Token
  accessTokens AccessToken[]
  // LoginLogs
  loginLogs    LoginLog[]
  // Storage
  storages     Storage[]

  @@index([deptId])
  @@map("sys_user")
}

model RefreshToken {
  id            String      @id @default(uuid()) @database.Uuid
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  value         String      @unique @database.VarChar(500)
  // 令牌过期时间
  expiredAt     DateTime    @map("expired_at")
  // 刷新令牌
  accessToken   AccessToken @relation(fields: [accessTokenId], references: [id])
  // 刷新令牌ID
  accessTokenId String      @map("access_token_id") @unique

  @@map("user_refresh_tokens")
}

model AccessToken {
  id           String        @id @default(uuid()) @database.Uuid
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  value        String        @unique @database.VarChar(500)
  // 令牌过期时间
  expiredAt    DateTime      @map("expired_at")
  // 用户
  user         User          @relation(fields: [userId], references: [id])
  // 用户ID
  userId       Int           @map("user_id")
  refreshToken RefreshToken?

  @@index([userId])
  @@map("user_access_tokens")
}

model DictType {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  // 字典名称
  name      String     @unique
  // 字典编码
  code      String     @unique
  // 状态
  status    Int?       @default(0)
  // 备注
  remark    String?
  sort      Int?       @default(0)
  // 值列表
  items     DictItem[]

  @@map("sys_dict_type")
}

model DictItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  // 字典项键名
  label     String
  // 字典项值
  value     String
  // 状态
  status    Int?     @default(0)
  // 备注
  remark    String?
  sort      Int?     @default(0)
  type      DictType @relation(fields: [typeId], references: [id])
  typeId    Int      @map("type_id")

  @@map("sys_dict_item")
}
